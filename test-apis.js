const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api/v1';

// Configuration des tests
const testData = {
  admin: {
    email: 'admin@tutorapp.com',
    password: 'admin123'
  },
  tutor: {
    email: 'tutor1@tutorapp.com',
    password: 'tutor123'
  },
  student: {
    email: 'student1@tutorapp.com',
    password: 'student123'
  }
};

let adminToken = '';
let tutorToken = '';
let studentToken = '';

async function testAuth() {
  console.log('üîê Test des endpoints d\'authentification...');
  
  try {
    // Test de connexion admin
    const adminLogin = await axios.post(`${BASE_URL}/auth/login`, {
      email: testData.admin.email,
      password: testData.admin.password
    });
    adminToken = adminLogin.data.accessToken;
    console.log('‚úÖ Connexion admin r√©ussie');
    
    // Test de connexion tuteur
    const tutorLogin = await axios.post(`${BASE_URL}/auth/login`, {
      email: testData.tutor.email,
      password: testData.tutor.password
    });
    tutorToken = tutorLogin.data.accessToken;
    console.log('‚úÖ Connexion tuteur r√©ussie');
    
    // Test de connexion √©tudiant
    const studentLogin = await axios.post(`${BASE_URL}/auth/login`, {
      email: testData.student.email,
      password: testData.student.password
    });
    studentToken = studentLogin.data.accessToken;
    console.log('‚úÖ Connexion √©tudiant r√©ussie');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'authentification:', error.response?.data || error.message);
  }
}

async function testProfiles() {
  console.log('\nüë§ Test des endpoints de profils...');
  
  try {
    // Test r√©cup√©ration des profils
    const profiles = await axios.get(`${BASE_URL}/profiles`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log(`‚úÖ R√©cup√©ration des profils: ${profiles.data.length} profils trouv√©s`);
    
    // Test r√©cup√©ration d'un profil sp√©cifique
    const profile = await axios.get(`${BASE_URL}/profiles/me`, {
      headers: { Authorization: `Bearer ${tutorToken}` }
    });
    console.log(`‚úÖ Profil tuteur r√©cup√©r√©: ${profile.data.firstName} ${profile.data.lastName}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests de profils:', error.response?.data || error.message);
  }
}

async function testBookings() {
  console.log('\nüìö Test des endpoints de r√©servations...');
  
  try {
    // Test r√©cup√©ration des r√©servations
    const bookings = await axios.get(`${BASE_URL}/booking`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log(`‚úÖ R√©cup√©ration des r√©servations: ${bookings.data.length} r√©servations trouv√©es`);
    
    // Test r√©cup√©ration des r√©servations d'un utilisateur
    const userBookings = await axios.get(`${BASE_URL}/booking`, {
      headers: { Authorization: `Bearer ${studentToken}` }
    });
    console.log(`‚úÖ R√©servations de l'√©tudiant: ${userBookings.data.length} r√©servations`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests de r√©servations:', error.response?.data || error.message);
  }
}

async function testPayments() {
  console.log('\nüí∞ Test des endpoints de paiements...');
  
  try {
    // Test r√©cup√©ration des paiements en attente
    const pendingPayments = await axios.get(`${BASE_URL}/payments/pending/all`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log(`‚úÖ Paiements en attente: ${pendingPayments.data.length} paiements`);
    
    // Test r√©cup√©ration des statistiques
    const stats = await axios.get(`${BASE_URL}/payments/stats/overview`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log(`‚úÖ Statistiques des paiements: ${stats.data.totalPending} en attente, ${stats.data.totalConfirmed} confirm√©s`);
    
    // Test r√©cup√©ration des paiements d'un utilisateur
    const userPayments = await axios.get(`${BASE_URL}/payments/user/student-001`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log(`‚úÖ Paiements de l'√©tudiant: ${userPayments.data.length} paiements`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests de paiements:', error.response?.data || error.message);
  }
}

async function testSearch() {
  console.log('\nüîç Test des endpoints de recherche...');
  
  try {
    // Test recherche de tuteurs
    const tutors = await axios.get(`${BASE_URL}/search/tutors?subject=Math√©matiques`, {
      headers: { Authorization: `Bearer ${studentToken}` }
    });
    console.log(`‚úÖ Recherche de tuteurs: ${tutors.data.length} tuteurs trouv√©s`);
    
    // Test recherche de coaches
    const coaches = await axios.get(`${BASE_URL}/search/coaches?expertise=D√©veloppement personnel`, {
      headers: { Authorization: `Bearer ${studentToken}` }
    });
    console.log(`‚úÖ Recherche de coaches: ${coaches.data.length} coaches trouv√©s`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests de recherche:', error.response?.data || error.message);
  }
}

async function testAdmin() {
  console.log('\nüë®‚Äçüíº Test des endpoints admin...');
  
  try {
    // Test statistiques syst√®me
    const systemStats = await axios.get(`${BASE_URL}/admin/stats`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log(`‚úÖ Statistiques syst√®me: ${systemStats.data.users.total} utilisateurs, ${systemStats.data.bookings.total} r√©servations`);
    
    // Test r√©cup√©ration des utilisateurs
    const users = await axios.get(`${BASE_URL}/admin/users`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log(`‚úÖ Utilisateurs r√©cup√©r√©s: ${users.data.users.length} utilisateurs`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests admin:', error.response?.data || error.message);
  }
}

async function runAllTests() {
  console.log('üöÄ D√©marrage des tests des APIs...\n');
  
  try {
    await testAuth();
    await testProfiles();
    await testBookings();
    await testPayments();
    await testSearch();
    await testAdmin();
    
    console.log('\nüéâ Tous les tests sont termin√©s !');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error.message);
  }
}

// D√©marrer les tests
runAllTests();

